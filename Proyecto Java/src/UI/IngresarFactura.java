package UI;

import Clases.Bicicleta;
import Clases.Cliente;
import Clases.Factura;
import Clases.Patines;
import Clases.Scooter;
import Clases.Transporte;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author Liu Ching Richard
 */
public class IngresarFactura extends javax.swing.JFrame {

    /**
     * Creates new form IngresarFactura
     */
    public IngresarFactura() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        volverMenu = new javax.swing.JButton();
        ingresar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        IDFactura = new javax.swing.JTextField();
        IDCliente = new javax.swing.JTextField();
        codigoTransporte = new javax.swing.JTextField();
        distancia = new javax.swing.JTextField();
        fecha = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Liu Ching Richard Proyecto 2");
        setResizable(false);

        volverMenu.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        volverMenu.setText("Volver al Menú");
        volverMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverMenuActionPerformed(evt);
            }
        });

        ingresar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ingresar.setText("Ingresar Factura");
        ingresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingresarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Ingresar Factura");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("ID Factura:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("ID Cliente:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Código del Transporte:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Distancia recorrida en metros:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Fecha (dd/mm/aaaa):");

        IDFactura.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        IDCliente.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        codigoTransporte.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        distancia.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        fecha.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("d/M/yyyy"))));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(volverMenu)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ingresar))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(IDFactura)
                            .addComponent(IDCliente)
                            .addComponent(codigoTransporte)
                            .addComponent(distancia)
                            .addComponent(fecha, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 175, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(161, 161, 161))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(IDFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(IDCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(codigoTransporte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(distancia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(fecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(volverMenu)
                    .addComponent(ingresar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverMenuActionPerformed
        // Para que aparezca nuevamente el menu principal
        MenuPrincipal menuPrincipal = new MenuPrincipal();
        menuPrincipal.setVisible(true); // Hace visible el menu principal

        // Cierra la ventana actual
        this.dispose();
    }//GEN-LAST:event_volverMenuActionPerformed

    private void ingresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingresarActionPerformed
        // Obtener los valores de los campos de texto
        String idFactura = IDFactura.getText().trim();
        String idCliente = IDCliente.getText().trim();
        String codigoTransp = codigoTransporte.getText().trim();
        String distanciaTexto = distancia.getText().trim();
        String fechaTexto = fecha.getText().trim();
        
        // Validar que los campos no estan vacíos
        if (idFactura.isEmpty() || idCliente.isEmpty() || codigoTransp.isEmpty() || distanciaTexto.isEmpty() || fechaTexto.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Todos los campos deben estar llenos.", "Error", JOptionPane.ERROR_MESSAGE); // Error en caso de que dejen un campo vacio
        }
        
        // Verificar si el ID de la factura ya existe
        if (verificarIDFacturaExistente(idFactura)) {
            JOptionPane.showMessageDialog(this, "El ID de la factura ya existe.", "Error", JOptionPane.ERROR_MESSAGE); // Error en caso de que ya exista el ID Factura
            return; // Salir del metodo ya que no se quiere sobrescribir una factura existente
        }
        
        // Convertir la distancia a un valor numerico ya que viene como string
        int distancia;
        try {
            distancia = Integer.parseInt(distanciaTexto);       // Se combierte a entero
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "La distancia debe ser un número válido.", "Error", JOptionPane.ERROR_MESSAGE);  // Error en caso de detectar que no insertaron un numero valido
            return;
        }
        
        // Convertir la fecha a un objeto Date
        Date fecha;
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");  // Pasar el formato de la fecha de la manera que se solicita dia/mes/año
            fecha = dateFormat.parse(fechaTexto);   // Pasarla a formato fecha
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(this, "El formato de la fecha debe ser dd/MM/yyyy.", "Error", JOptionPane.ERROR_MESSAGE);     // Error si no la digitan de la forma correcta
            return;
        }
        
        // Buscar el tipo de transporte en el archivo Transporte.txt
        String tipoTransporte = "";
        try (BufferedReader br = new BufferedReader(new FileReader("Transporte.txt"))) { // Leer el archivo Transporte para ver cual es
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] datos = linea.split(",");
                if (datos[0].equals(codigoTransp)) {
                    tipoTransporte = datos[2]; // El tipo de transporte esta en la tercera columna de cada linea
                    break;
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al leer el archivo Transporte.txt.", "Error", JOptionPane.ERROR_MESSAGE);  // Error si no lo logra abrir para lectura
            return;
        }

        // Error si no se encontro el codigo del transporte
        if (tipoTransporte.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El código de transporte no se encuentra registrado.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Obtener el cliente actual
        Cliente clienteActual = Cliente.getClienteActual();
        if (clienteActual == null || !clienteActual.getId().equals(idCliente)) {
            JOptionPane.showMessageDialog(this, "El ID de cliente no coincide con el cliente activo.", "Error", JOptionPane.ERROR_MESSAGE); // Error si no coinciden los ID
            return;
        }

        // Calcular el monto utilizando el metodo apropiado de la clase correspondiente
        double monto = 0;
        Transporte transporte = null; // Ya que Transporte es la clase principal
        
        switch (tipoTransporte) {
            case "Bicicleta":
                transporte = new Bicicleta(); // Crear instancia de Bicicleta
                break;
            case "Scooter":
                transporte = new Scooter(); // Crear instancia de Scooter
                break;
            case "Patines":
                transporte = new Patines(); // Crear instancia de Patines
                break;
            default:
                JOptionPane.showMessageDialog(this, "Tipo de transporte desconocido.", "Error", JOptionPane.ERROR_MESSAGE);  // En caso de que no este ese tipo de transporte
                return;
        }
        
        // Ahora se llama al metodo CalcularMonto a traves de la instancia
        if (transporte != null) {
            monto = transporte.CalcularMonto(distancia);
        }
        
        // Crear una instancia de Factura
        Factura factura = new Factura(idFactura, idCliente, clienteActual.getNombre(), codigoTransp, distancia, fechaTexto, monto);

        // Guardar la informacion de la factura en Alquiler.txt
        try (BufferedWriter bw = new BufferedWriter(new FileWriter("Alquiler.txt", true))) {
            bw.write(factura.toString());                   //Colocar toda la inforamcion en una linea del Archivo
            bw.newLine();
            JOptionPane.showMessageDialog(this, "Factura ingresada con éxito.", "Éxito", JOptionPane.INFORMATION_MESSAGE);  // Mensaje en caso de ingresar los datos correctamente
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al escribir en el archivo Alquiler.txt.", "Error", JOptionPane.ERROR_MESSAGE);   // Error en caso de no poder abrir el archivo para escritura
        }
        limpiarCampos();
    }//GEN-LAST:event_ingresarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IngresarFactura.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IngresarFactura.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IngresarFactura.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IngresarFactura.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IngresarFactura().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField IDCliente;
    private javax.swing.JTextField IDFactura;
    private javax.swing.JTextField codigoTransporte;
    private javax.swing.JTextField distancia;
    private javax.swing.JFormattedTextField fecha;
    private javax.swing.JButton ingresar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JButton volverMenu;
    // End of variables declaration//GEN-END:variables

    private void limpiarCampos() {
        // Limpia cada campo de texto y restablece los valores predeterminados si es necesario
        IDFactura.setText("");
        IDCliente.setText("");
        codigoTransporte.setText("");
        distancia.setText("");
        fecha.setText("");
    }

    private boolean verificarIDFacturaExistente(String idFactura) {
        File archivo = new File("Alquiler.txt");
        if (!archivo.exists()) {
            return false; // El archivo no existe, por lo que el ID no puede estar duplicado
        }

        try (BufferedReader br = new BufferedReader(new FileReader(archivo))) {   // Abre el archivo para lectura
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] datos = linea.split(",");
                if (datos[0].equals(idFactura)) {  // Lee el primer String de cada fila dentro del archivo
                    return true;            // Si se encontro un ID de factura existente
                }
            }
        } catch (IOException e) {
            e.printStackTrace(); // Manejar adecuadamente la excepción
        }

        return false; // No se encontro el ID, por lo que no esta duplicado
    }
}

