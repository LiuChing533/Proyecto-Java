package UI;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;

/**
 *
 * @author Liu Ching Richard
 */
public class GestionTransporte extends javax.swing.JFrame {

    /**
     * Creates new form GestionTransporte
     */
    public GestionTransporte() {
        initComponents();
        this.setLocationRelativeTo(null);
        
        // Deshabilitar campos de texto y botones
        codigo.setEnabled(false);
        tipo.setEnabled(false);
        codigoActual.setEnabled(false);
        codigoNuevo.setEnabled(false);
        tipoNuevo.setEnabled(false);
        codigoEliminar.setEnabled(false);
        transporte.setEnabled(false);
        cantidadCambios.setEnabled(false);  
        color.setEnabled(false);            
        cantidadRuedas.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        volverMenu = new javax.swing.JButton();
        aceptar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        funcion = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        codigo = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        tipo = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        codigoActual = new javax.swing.JTextField();
        codigoNuevo = new javax.swing.JTextField();
        tipoNuevo = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        codigoEliminar = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        transporte = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        cantidadCambios = new javax.swing.JFormattedTextField();
        jLabel11 = new javax.swing.JLabel();
        color = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        cantidadRuedas = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Liu Ching Richard Proyecto 2");
        setResizable(false);

        volverMenu.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        volverMenu.setText("Volver al Menú");
        volverMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverMenuActionPerformed(evt);
            }
        });

        aceptar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        aceptar.setText("Aceptar");
        aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aceptarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Transporte");

        funcion.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        funcion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ingresar", "Modificar", "Eliminar" }));
        funcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                funcionActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Función:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Código (min 5 caracteres): ");

        codigo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Tipo (normal/eléctrico):");

        tipo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "normal", "electrico" }));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Código Actual:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Código Nuevo:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("Tipo Nuevo:");

        codigoActual.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        codigoNuevo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        tipoNuevo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tipoNuevo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "normal", "electrico" }));

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("Código a Eliminar:");

        codigoEliminar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setText("Transporte:");

        transporte.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        transporte.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bicicleta", "Scooter", "Patines" }));
        transporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transporteActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel10.setText("Cantidad de Cambios:");

        cantidadCambios.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#"))));
        cantidadCambios.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel11.setText("Color:");

        color.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel12.setText("Cantidad de Ruedas:");

        cantidadRuedas.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#"))));
        cantidadRuedas.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(231, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(224, 224, 224))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(funcion, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(193, 193, 193))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(volverMenu)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(aceptar))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tipo, 0, 90, Short.MAX_VALUE)
                            .addComponent(codigo)
                            .addComponent(transporte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(color)
                            .addComponent(cantidadCambios)
                            .addComponent(cantidadRuedas))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(codigoActual)
                                    .addComponent(codigoNuevo)
                                    .addComponent(tipoNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(codigoEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(funcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(codigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(tipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(transporte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(cantidadCambios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8)
                                    .addComponent(codigoEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(52, 52, 52))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11)
                                    .addComponent(color, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel12)
                                    .addComponent(cantidadRuedas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(volverMenu)
                            .addComponent(aceptar)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(codigoActual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(codigoNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(tipoNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void funcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_funcionActionPerformed
        // Obtener la funcion seleccionada
        String selectedFunction = (String) funcion.getSelectedItem();

        // Deshabilitar todos los campos primero
        codigo.setEnabled(false);
        tipo.setEnabled(false);
        codigoActual.setEnabled(false);
        codigoNuevo.setEnabled(false);
        tipoNuevo.setEnabled(false);
        codigoEliminar.setEnabled(false);
        transporte.setEnabled(false);
        cantidadCambios.setEnabled(false);  
        color.setEnabled(false);            
        cantidadRuedas.setEnabled(false);

        // Habilitar campos basados en la funcion seleccionada
        if ("Ingresar".equals(selectedFunction)) {
            codigo.setEnabled(true);            // Para que solo aparezcan estos campos disponibles 
            tipo.setEnabled(true);
            transporte.setEnabled(true);
        } else if ("Modificar".equals(selectedFunction)) {
            codigoActual.setEnabled(true);      // Para que solo aparezcan estos campos disponibles
            codigoNuevo.setEnabled(true);
            tipoNuevo.setEnabled(true);
        } else if ("Eliminar".equals(selectedFunction)) {
            codigoEliminar.setEnabled(true);   // Para que solo aparezca este campo disponible
        }
    }//GEN-LAST:event_funcionActionPerformed

    private void volverMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverMenuActionPerformed
        // Para que aparezca nuevamente el menu principal
        MenuPrincipal menuPrincipal = new MenuPrincipal();
        menuPrincipal.setVisible(true); // Hace visible el menu principal

        // Cierra la ventana actual
        this.dispose();
    }//GEN-LAST:event_volverMenuActionPerformed

    private void aceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aceptarActionPerformed
        String funcionSeleccionada = funcion.getSelectedItem().toString();
        switch (funcionSeleccionada) {
            case "Ingresar":
                ingresarTransporte();   // En caso de seleccionar Ingresar, se inicializa la funcion
                limpiarCampos();
                break;
            case "Modificar":
                modificarTransporte();  // En caso de seleccionar Modificar, se inicializa la funcion
                limpiarCampos();
                break;
            case "Eliminar":
                eliminarTransporte();   // En caso de seleccionar Eliminar, se inicializa la funcion
                limpiarCampos();
                break;
            default:
                JOptionPane.showMessageDialog(this, "Función no reconocida.", "Error", JOptionPane.ERROR_MESSAGE); // Error en caso de haber una seleccion erronea
        }
    }//GEN-LAST:event_aceptarActionPerformed

    private void transporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transporteActionPerformed
        // Obtener el tipo de transporte seleccionado
        String tipoTransporteSeleccionado = (String) transporte.getSelectedItem();
        
        // Activar o desactivar las cajas de texto según la seleccion
        switch (tipoTransporteSeleccionado) {
            case "Bicicleta":
                cantidadCambios.setEnabled(true); // Activa la caja para la cantidad de cambios
                color.setEnabled(false); // Desactiva la caja para el color
                cantidadRuedas.setEnabled(false); // Desactiva la caja para la cantidad de ruedas
                break;
            case "Scooter":
                cantidadCambios.setEnabled(false); // Desactiva la caja para la cantidad de cambios
                color.setEnabled(true); // Activa la caja para el color
                cantidadRuedas.setEnabled(false); // Desactiva la caja para la cantidad de ruedas
                break;
            case "Patines":
                cantidadCambios.setEnabled(false); // Desactiva la caja para la cantidad de cambios
                color.setEnabled(false); // Desactiva la caja para el color
                cantidadRuedas.setEnabled(true); // Activa la caja para la cantidad de ruedas
                break;
            default:
                // Por defecto, desactivar todas las cajas especificas si la seleccion no es valida
                cantidadCambios.setEnabled(false);  // Desactiva la caja para la cantidad de cambios
                color.setEnabled(false);            // Desactiva la caja para el color
                cantidadRuedas.setEnabled(false);   // Desactiva la caja para la cantidad de ruedas
                break;
        }
    }//GEN-LAST:event_transporteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionTransporte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionTransporte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionTransporte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionTransporte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestionTransporte().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aceptar;
    private javax.swing.JFormattedTextField cantidadCambios;
    private javax.swing.JFormattedTextField cantidadRuedas;
    private javax.swing.JTextField codigo;
    private javax.swing.JTextField codigoActual;
    private javax.swing.JTextField codigoEliminar;
    private javax.swing.JTextField codigoNuevo;
    private javax.swing.JTextField color;
    private javax.swing.JComboBox<String> funcion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JComboBox<String> tipo;
    private javax.swing.JComboBox<String> tipoNuevo;
    private javax.swing.JComboBox<String> transporte;
    private javax.swing.JButton volverMenu;
    // End of variables declaration//GEN-END:variables

    private void ingresarTransporte() {
        // Obtener los valores de los campos de texto
        String codigoTexto = codigo.getText().trim();
        String tipoTexto = tipo.getSelectedItem().toString();
        String transporteTexto = transporte.getSelectedItem().toString();

        // Validar los campos de texto que no esten vacios
        if (codigoTexto.isEmpty() || tipoTexto.isEmpty() || transporteTexto.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Todos los campos deben ser llenados para ingresar un transporte.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (codigoTexto.length() < 5) { // validar que sea mayor o igual a 5 caracteres
            JOptionPane.showMessageDialog(this, "El código debe tener al menos 5 caracteres.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Variables para almacenar caracteristicas especificas
        int cantidadCambiosNum = 0;
        String colorScooter = "";
        int cantidadRuedasNum = 0;

        // Validar y obtener las caracteristicas especificas segun el tipo de transporte seleccionado
        try {
            switch (transporteTexto) {
                case "Bicicleta":
                    cantidadCambiosNum = Integer.parseInt(cantidadCambios.getText().trim());
                    if (cantidadCambiosNum < 0) throw new NumberFormatException();
                    break;
                case "Scooter":
                    colorScooter = color.getText().trim();
                    break;
                case "Patines":
                    cantidadRuedasNum = Integer.parseInt(cantidadRuedas.getText().trim());
                    if (cantidadRuedasNum < 0) throw new NumberFormatException();
                    break;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor ingrese un valor entero positivo para la cantidad de cambios o ruedas.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Verificar si el codigo ya existe
        boolean codigoExistente = false;
        File archivo = new File("Transporte.txt");
        if (archivo.exists()) {
            try (BufferedReader br = new BufferedReader(new FileReader(archivo))) { // Lee el archivo a ver si ese codigo ya esta
                String linea;
                while ((linea = br.readLine()) != null) {
                    String[] datos = linea.split(",");
                    if (datos[0].equals(codigoTexto)) {
                        JOptionPane.showMessageDialog(this, "Un transporte con ese código ya existe.", "Error", JOptionPane.ERROR_MESSAGE); // Error en caso de que si sean iguales
                        codigoExistente = true;
                        break;
                    }
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Hubo un error al leer el archivo.", "Error", JOptionPane.ERROR_MESSAGE); // Error si no logra leer el archivo
                return;
            }
        }

        // Si el codigo no existe, agregar el nuevo transporte
        if (!codigoExistente) {
            try (BufferedWriter bw = new BufferedWriter(new FileWriter(archivo, true))) {   // Se usa esta funcion para editar el archivo 
                // Escribir la informacion segun el tipo de transporte
                String caracteristicaEspecial = "";
                switch (transporteTexto) {
                    case "Bicicleta":
                        caracteristicaEspecial = cantidadCambios.getText().trim();
                        break;
                    case "Scooter":
                        caracteristicaEspecial = color.getText().trim();
                        break;
                    case "Patines":
                        caracteristicaEspecial = cantidadRuedas.getText().trim();
                        break;
                }

                // Construir la linea a escribir en el archivo
                String lineaParaEscribir = codigoTexto + "," + tipoTexto + "," + transporteTexto + "," + caracteristicaEspecial;

                // Escribir la nueva linea en el archivo
                bw.write(lineaParaEscribir);
                bw.newLine();
                JOptionPane.showMessageDialog(this, "Transporte ingresado con éxito.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Hubo un error al escribir en el archivo.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    private void modificarTransporte() {
        // Captar los datos ingresados por el usuario
        String codigoActualTexto = codigoActual.getText().trim();
        String codigoNuevoTexto = codigoNuevo.getText().trim();
        String tipoNuevoTexto = tipoNuevo.getSelectedItem().toString();

        // Validar los campos de texto
        if (codigoActualTexto.isEmpty() || codigoNuevoTexto.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Los campos de código no pueden estar vacíos.", "Error", JOptionPane.ERROR_MESSAGE);    // Error si deja campos vacios
            return;
        }

        if (codigoNuevoTexto.length() < 5) {
            JOptionPane.showMessageDialog(this, "El nuevo código debe tener al menos 5 caracteres.", "Error", JOptionPane.ERROR_MESSAGE);  // Error si no coloca bien el codigo
            return;
        }

        Map<String, String[]> transportes = new HashMap<>();      // Para acceder y almacenar los valores de la forma clave, valor, en este caso codigo, tipo, transporte, caracteristica
        boolean existeCodigoActual = false;
        boolean existeCodigoNuevo = false;

        // Cargar los transportes existentes
        File archivo = new File("Transporte.txt");  // Crear si no existe el archivo
        try (BufferedReader br = new BufferedReader(new FileReader(archivo))) {     // Leer el archivo de Transporte.txt
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] datos = linea.split(",");
                transportes.put(datos[0], datos);   // Sacar los datos por linea empezando por los codigos
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al leer el archivo.", "Error", JOptionPane.ERROR_MESSAGE);   // Error en caso de no poder leer el archivo
            return;
        }

        // Verificar si el codigo actual existe
        existeCodigoActual = transportes.containsKey(codigoActualTexto);
        // Verificar si el nuevo codigo ya existe y no es el mismo que el codigo actual
        existeCodigoNuevo = !codigoActualTexto.equals(codigoNuevoTexto) && transportes.containsKey(codigoNuevoTexto);

        if (!existeCodigoActual) {
            JOptionPane.showMessageDialog(this, "El código actual no existe.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (existeCodigoNuevo) {
            JOptionPane.showMessageDialog(this, "El nuevo código ya está en uso por otro transporte.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Actualizar el Map con los nuevos datos
        String[] datosActualizados = new String[] {
            codigoNuevoTexto, // Nuevo codigo
            tipoNuevoTexto, // Nuevo tipo
            transportes.get(codigoActualTexto)[2], // Tipo de transporte (no cambia)
            transportes.get(codigoActualTexto)[3] // Característica especial (no cambia)
        };
        
        // Si el codigo cambio, elimina el antiguo y agrega el nuevo
        if (!codigoActualTexto.equals(codigoNuevoTexto)) {
            transportes.remove(codigoActualTexto);
        }
        transportes.put(codigoNuevoTexto, datosActualizados);

        // Reescribir el archivo con los cambios
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(archivo, false))) { // false para sobrescribir lo que hay
            for (String[] datos : transportes.values()) {
                String lineaParaEscribir = String.join(",", datos); // Pasa los datos del Map
                bw.write(lineaParaEscribir);
                bw.newLine();
            }
            JOptionPane.showMessageDialog(this, "Transporte modificado con éxito.", "Éxito", JOptionPane.INFORMATION_MESSAGE); // Mensaje si se modifico correctamente
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al escribir en el archivo.", "Error", JOptionPane.ERROR_MESSAGE);        // Error si no logra modificar el archivo
        }
    }

    private void eliminarTransporte() {
        // Obtiene el texto del componente codigoEliminar
        String codigoEliminarTexto = codigoEliminar.getText().trim();

        List<String> lineas = new ArrayList<>();  // Crea un array con los datos
        boolean eliminado = false;

        // Leer el archivo completo
        try (BufferedReader br = new BufferedReader(new FileReader("Transporte.txt"))) {    // Lee el archivo de transporte
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] datos = linea.split(",");
                if (datos[0].equals(codigoEliminarTexto)) {
                    eliminado = true;
                    continue; // No añadir la línea al array 
                }
                lineas.add(linea);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al leer el archivo.", "Error", JOptionPane.ERROR_MESSAGE); // Error si no puede abrir el archivo
            return;
        }

        // Si se elimino un transporte, reescribir el archivo
        if (eliminado) {
            try (BufferedWriter bw = new BufferedWriter(new FileWriter("Transporte.txt"))) {        // Para modificar el archivo y eliminar
                for (String linea : lineas) {
                    bw.write(linea);
                    bw.newLine();
                }
                JOptionPane.showMessageDialog(this, "Transporte eliminado con éxito.", "Éxito", JOptionPane.INFORMATION_MESSAGE); // Mensaje si se logro eliminar
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al escribir en el archivo.", "Error", JOptionPane.ERROR_MESSAGE);    // Error si no se logra eliminar o abrir el archivo
            }
        } else {
            JOptionPane.showMessageDialog(this, "El código proporcionado no existe.", "Error", JOptionPane.ERROR_MESSAGE);  // Si quieren eliminar un codigo que no existe
        }
    }
    
    private void limpiarCampos() {
    // Limpia cada campo de texto y restablece los valores predeterminados si es necesario
    codigo.setText("");
    tipo.setSelectedIndex(0);
    codigoActual.setText("");
    codigoNuevo.setText("");
    tipoNuevo.setSelectedIndex(0);
    codigoEliminar.setText("");
    transporte.setSelectedIndex(0);
    cantidadCambios.setText("");
    color.setText("");
    cantidadRuedas.setText("");
    }

}
